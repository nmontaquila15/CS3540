import random, sys, time
from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *


# constants
TIMER_TIME = 33
SIZE = 480

TIMERS_PER_SPRITE = 8 # how many timer events should be called before moving to the next frame in sprite animation

SHEET_DATA = None # sprite sheet data, filled in later
SHEET_SIZE_I = 126, 144 # size of entire sprite sheet, in pixels

SPRITE_SIZE_I = 34, 36 # actual size of each sprite, in pixels
SPRITE_STRIDE_I = 46, 36 # how much space each sprite takes up in the sheet, in pixels

SPRITE_SIZE = SPRITE_SIZE_I[0] / float(SHEET_SIZE_I[0]), SPRITE_SIZE_I[1] / float(SHEET_SIZE_I[1]) # sprite size relative to sheet size
SPRITE_STRIDE = SPRITE_STRIDE_I[0] / float(SHEET_SIZE_I[0]), SPRITE_STRIDE_I[1] / float(SHEET_SIZE_I[1]) # sprite space relative to sheet size


# state
keys_down = set()

sprite_index = [1, 3] # which sprite to display
cycle_index = 0 # which frame (0 - 3) in the animation to display
last_sprite_change = TIMERS_PER_SPRITE # how many more timer calls until the animation moves forward a frame
texture = None # texture ID


# function to determine texture coordinates
def gettexcoords():
    global sprite_index

    coords = [
        0., # lower u/x texture coord
        0., # lower v/y texture coord
        1., # upper u/x texture coord
        1.  # upper v/y texture coord
        ]

    # TODO: compute texture coordinates based on sprite_index
    
    coords[3] = sprite_index[1] * SPRITE_STRIDE[1] + SPRITE_SIZE[1]
    coords[2] = sprite_index[0] * SPRITE_STRIDE[0] + SPRITE_SIZE[0]
    coords[1] = sprite_index[1] * SPRITE_STRIDE[1]
    coords[0] = sprite_index[0] * SPRITE_STRIDE[0]

    return coords


# function to load in texture from file
def loadtexture():
    global SHEET_DATA

    import base64, pickle, zlib
    imdata = pickle.loads(zlib.decompress(base64.b64decode(SHEET_DATA)))

    tex = glGenTextures(1)
    glBindTexture(GL_TEXTURE_2D, tex)
    glPixelStorei(GL_UNPACK_ALIGNMENT, 1)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE)
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, SHEET_SIZE_I[0], SHEET_SIZE_I[1], 0, GL_RGBA, GL_UNSIGNED_BYTE, imdata)

    return tex
    

# function for handling key down
def keyboard(c, x, y):
    global keys_down

    keys_down.add(c.lower())
    
    
# function for handling key up
def keyboardup(c, x, y):
    global keys_down

    keys_down.discard(c.lower())


# handle state update on timer
def timer(value):
    global keys_down
    global sprite_index, last_sprite_change, cycle_index

    dt = TIMER_TIME / 1000.0

    # TODO: update sprite state based on keys down
    
    walk = False
    
    if 'w' in keys_down:
        sprite_index[1] = 1
        walk = True
        
    elif

    glutPostRedisplay()
    glutTimerFunc(TIMER_TIME, timer, 0)


# function for displaying the game screen
def display():
    global texture

    if texture == None:
        texture = loadtexture()

    glClearColor(0, 0.2, 0, 1)
    glClear(GL_COLOR_BUFFER_BIT)

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, 1, 0, 1);
 
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    glColor3f(1, 1, 1)

    glEnable(GL_BLEND)
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
    glEnable(GL_TEXTURE_2D)

    coords = gettexcoords()

    glPushMatrix()
    glTranslate(0.5 - SPRITE_SIZE[0] / 2., 0.5 - SPRITE_SIZE[1] / 2., 0.)

    glBegin(GL_QUADS)
    glTexCoord2f(coords[0], coords[1])
    glVertex2f(0.0, 0.0)
    glTexCoord2f(coords[2], coords[1])
    glVertex2f(SPRITE_SIZE[0], 0.0)
    glTexCoord2f(coords[2], coords[3])
    glVertex2f(SPRITE_SIZE[0], SPRITE_SIZE[1])
    glTexCoord2f(coords[0], coords[3])
    glVertex2f(0.0, SPRITE_SIZE[1])
    glEnd()

    glPopMatrix()

    glutSwapBuffers()


# sprite sheet data (modified from Curt - cjc83486 - https://opengameart.org/content/rpg-character)
SHEET_DATA = ''


# startup
glutInit(sys.argv)
glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE)
glutInitWindowSize(SIZE, SIZE)
glutCreateWindow('CS3540')
glutDisplayFunc(display)
glutKeyboardFunc(keyboard)
glutKeyboardUpFunc(keyboardup)
glutTimerFunc(TIMER_TIME, timer, 0)
glutMainLoop()